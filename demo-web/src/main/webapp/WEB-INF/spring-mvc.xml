<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!-- 自动扫描且只扫描@Controller -->
<!--     <context:component-scan base-package="com.lingcaibao.web" use-default-filters="false"> -->
<!--         <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
<!--         <context:include-filter type="annotation" -->
<!--                                 expression="org.springframework.web.bind.annotation.ControllerAdvice"/> -->
<!--     </context:component-scan> -->

	<context:component-scan base-package="com.lingcaibao.web" />

<!-- 	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">   -->
<!--         <property name="messageConverters">   -->
<!--             <list>   -->
<!--                 <bean id="stringHttpMessageConverter" class="com.lingcaibao.web.interceptor.StringHttpMessageConverter">   -->
<!--                     <constructor-arg value="UTF-8" />   -->
<!--                 </bean>   -->
<!--             </list>   -->
<!--         </property>   -->
<!--     </bean>  -->
	
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
<!--             <bean class="com.lingcaibao.web.interceptor.StringHttpMessageConverter"> -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

	<!-- 拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 对所有的请求拦截使用/** ,对某个模块下的请求拦截使用：/myPath/* -->
            <mvc:mapping path="/**" />
            <ref bean="verifyInterceptor" />
        </mvc:interceptor>
        <!-- <mvc:interceptor>福利列表数据验证 
            对所有的请求拦截使用/** ,对某个模块下的请求拦截使用：/myPath/*
            <mvc:mapping path="/openapi/**" />
            <bean class="com.lingcaibao.web.interceptor.LotVerifyAnnotationInterceptor"/> 
        </mvc:interceptor> -->
    </mvc:interceptors>
 
    <bean id="verifyInterceptor"
        class="com.lingcaibao.web.interceptor.VerifyInterceptor">
    </bean>

	<!-- velocity解析器,替换掉原来的jsp -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="toolboxConfigLocation" value="/WEB-INF/toolbox.xml" />
	<!-- 		<property name="toolboxConfigLocation" value="classpath:toolbox.xml" /> -->
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="suffix" value=".vm" />
	</bean>

	<bean id="velocityConfigurer"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath">
			<value>WEB-INF/views/</value>
		</property>
		<property name="configLocation">
			<value>classpath:velocity.properties</value>
		</property>
<!-- 		<property name="velocityProperties"> -->
<!-- 			<props> -->
<!-- 				<prop key="input.encoding">UTF-8</prop> -->
<!-- 				<prop key="output.encoding">UTF-8</prop> -->
<!-- 				<prop key="contentType">text/html;charset=UTF-8</prop> -->
<!-- 				<prop key="velocimacro.library">macro/macros.vm</prop> -->
<!-- 			</props> -->
<!-- 		</property> -->
	</bean>


    <!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL-->
    <mvc:default-servlet-handler/>

    <!-- 定义无需Controller的url<->view直接映射 -->
    <!-- mvc:view-controller path="/admin" view-name="redirect:/login"/> -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    
    <!-- 将Controller抛出的异常转到特定View, 保持SiteMesh的装饰效果 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.Throwable">error/system</prop>
            </props>
        </property>
    </bean>
    
    <!-- 支持 Shiro对Controller的方法级AOP安全控制  begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<!-- 	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> -->
	<!--         <property name="securityManager" ref="securityManager"/> -->
	<!--     </bean> -->
	<!-- 	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> -->
	<!--     	<property name="securityManager" ref="securityManager"/> -->
	<!-- 	</bean> -->
	<!-- end -->
</beans>

